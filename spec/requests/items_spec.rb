require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "api/v1/items", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Item. As you add validations to Item, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryBot.attributes_for(:item)
  }

  let(:invalid_attributes) {
    FactoryBot.attributes_for(:item, price: 0)
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # ItemsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /api/v1/items" do
    let!(:item){ create :item }

    it "renders a successful response" do
      get api_v1_items_url, headers: valid_headers, as: :json
      expect(response).to be_successful
      expect(json_body).to eq(
        {
          data: [
            { attributes: {
                code: item.code,
                name: item.name,
                price: item.price.to_s
              },
              id: item.code,
              type: "item"
            }
          ]
        }
      )
    end
  end

  describe "GET /api/v1/items/:code" do
    let!(:item){ create :item }

    it "renders a successful response" do
      get api_v1_item_url(code: item.code), as: :json
      expect(response).to be_successful
      expect(json_body).to eq(
        {
          data: {
            attributes: {
              code: item.code,
              name: item.name,
              price: item.price.to_s
            },
            id: item.code,
            type: "item"
          }
        }
      )
    end
  end

  describe "POST /api/v1/items" do
    context "with valid parameters" do
      it "creates a new Item" do
        expect {
          post api_v1_items_url,
               params: { item: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Item, :count).by(1)
      end

      it "renders a JSON response with the new item" do
        post api_v1_items_url,
             params: { item: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
        expect(json_body).to eq(
          {
            data: {
              attributes: {
                code: valid_attributes[:code],
                name: valid_attributes[:name],
                price: valid_attributes[:price].to_s
              },
              id: valid_attributes[:code],
              type: "item"
            }
          }
        )
      end
    end

    context "with invalid parameters" do
      it "does not create a new Item" do
        expect {
          post api_v1_items_url,
               params: { item: invalid_attributes }, as: :json
        }.to change(Item, :count).by(0)
      end

      it "renders a JSON response with errors for the new item" do
        post api_v1_items_url,
             params: { item: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /api/v1/items/:code" do
    let!(:item){ create :item }

    context "with valid parameters" do
      let(:new_attributes) {
        FactoryBot.attributes_for(:item).slice(:price)
      }

      it "updates the requested item" do
        patch api_v1_item_url(code: item.code),
              params: { item: new_attributes }, headers: valid_headers, as: :json
        item.reload
        expect(response).to have_http_status(:ok)
      end

      it "renders a JSON response with the item" do
        patch api_v1_item_url(code: item.code),
              params: { item: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
        expect(json_body).to eq(
          {
            data: {
              attributes: {
                code: item.code,
                name: item.name,
                price: new_attributes[:price].to_s
              },
              id: item.code,
              type: "item"
            }
          }
        )
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the item" do
        patch api_v1_item_url(code: item.code),
              params: { item: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /api/v1/destroy/:code" do
    let!(:item){ create :item }

    it "destroys the requested item" do
      expect {
        delete api_v1_item_url(code: item.code), headers: valid_headers, as: :json
      }.to change(Item, :count).by(-1)
    end
  end
end
